{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8119e53",
   "metadata": {},
   "source": [
    "# Question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e80bcda",
   "metadata": {},
   "source": [
    "## a.Calculate minutely returns of the stock based on mid-price and report summary statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "5a71ccfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd # for data analystics libraries\n",
    "import numpy as np # for number manipulation\n",
    "import matplotlib.pyplot as plt # for plotting and visualisations\n",
    "import statistics as stats # for statistcial analysis\n",
    "import scipy.io as io # same as above and better\n",
    "import seaborn as sns # for data visualisation\n",
    "from sklearn.linear_model import LinearRegression # helpful for regression analysis\n",
    "import statsmodels.api as sm # for statistical analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "94614e6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data= io.loadmat('FTSE_sample')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "e373e515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['__header__', '__version__', '__globals__', 'Bestask', 'Bestbid', 'MO'])\n"
     ]
    }
   ],
   "source": [
    "print(Data.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "c7d06559",
   "metadata": {},
   "outputs": [],
   "source": [
    "Best_Ask =Data['Bestask']\n",
    "Best_Bid = Data['Bestbid']\n",
    "MO1 = Data['MO']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "29303662",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data = {\n",
    "    'Best Ask': Best_Ask.flatten(),\n",
    "    'Best Bid': Best_Bid.flatten(),\n",
    "    'MO': MO1.flatten()\n",
    "}\n",
    "\n",
    "Data = pd.DataFrame(Data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "26767560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Best Ask</th>\n",
       "      <th>Best Bid</th>\n",
       "      <th>MO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>149.35</td>\n",
       "      <td>149.10</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>149.35</td>\n",
       "      <td>149.00</td>\n",
       "      <td>4.1283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>149.50</td>\n",
       "      <td>149.25</td>\n",
       "      <td>-2.8656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>149.95</td>\n",
       "      <td>149.85</td>\n",
       "      <td>5.4553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149.90</td>\n",
       "      <td>149.60</td>\n",
       "      <td>122.4072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62215</th>\n",
       "      <td>125.85</td>\n",
       "      <td>125.75</td>\n",
       "      <td>-43.7396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62216</th>\n",
       "      <td>125.95</td>\n",
       "      <td>125.85</td>\n",
       "      <td>2.1216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62217</th>\n",
       "      <td>126.00</td>\n",
       "      <td>125.90</td>\n",
       "      <td>20.9690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62218</th>\n",
       "      <td>125.95</td>\n",
       "      <td>125.90</td>\n",
       "      <td>27.2930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62219</th>\n",
       "      <td>126.80</td>\n",
       "      <td>126.70</td>\n",
       "      <td>31.9993</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>62220 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Best Ask  Best Bid        MO\n",
       "0        149.35    149.10    0.0000\n",
       "1        149.35    149.00    4.1283\n",
       "2        149.50    149.25   -2.8656\n",
       "3        149.95    149.85    5.4553\n",
       "4        149.90    149.60  122.4072\n",
       "...         ...       ...       ...\n",
       "62215    125.85    125.75  -43.7396\n",
       "62216    125.95    125.85    2.1216\n",
       "62217    126.00    125.90   20.9690\n",
       "62218    125.95    125.90   27.2930\n",
       "62219    126.80    126.70   31.9993\n",
       "\n",
       "[62220 rows x 3 columns]"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "39103e8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary stats for minutely: \n",
      "count    62220.000000\n",
      "mean        -0.000095\n",
      "std          0.182502\n",
      "min         -7.428571\n",
      "25%         -0.058754\n",
      "50%          0.000000\n",
      "75%          0.058052\n",
      "max          5.734521\n",
      "Name: Minutely Returns, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "Data['Mid-Price'] = (Data['Best Ask'] + Data['Best Bid']) / 2 # Mid Price for the dataset\n",
    "\n",
    "Data['Minutely Returns'] = (Data['Mid-Price'].pct_change() * 100).fillna(0)  # Minutely Returns calculations\n",
    "\n",
    "summary_stats = Data['Minutely Returns'].describe() \n",
    "\n",
    "print(f'Summary stats for minutely: ')\n",
    "print(summary_stats)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7da91a8",
   "metadata": {},
   "source": [
    "## b.Plot autocorrelation function of minutely order flows up to 20 lags."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "78948348",
   "metadata": {},
   "outputs": [],
   "source": [
    "order_flow = Data['MO'] - Data['MO'].shift(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "a3181c00",
   "metadata": {},
   "outputs": [],
   "source": [
    "autocorr_values = []\n",
    "lags = range(21) \n",
    "for lag in lags:\n",
    "    autocorr_values.append(order_flow.autocorr(lag))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "3142d7b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 5))\n",
    "plt.bar(lags, autocorr_values) \n",
    "plt.xlabel('Lag')\n",
    "plt.ylabel('Autocorrelation ')\n",
    "plt.title('Autocorrelation of Order Flows')\n",
    "plt.xlim()\n",
    "plt.ylim()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "553eaf8e",
   "metadata": {},
   "source": [
    "##  c.Regress minutely return on return of previous minute and the contemporaneous order flow. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "da08ca56",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data['Previous Minute Return'] = Data['Minutely Returns'].shift(1).fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "8adf9465",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data = Data.dropna(subset=['Previous Minute Return', 'MO', 'Minutely Returns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "46e62094",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Previous Minute Return\n",
       " 0.000000e+00    9655\n",
       " 2.220446e-14     133\n",
       "-2.220446e-14      82\n",
       "-1.110223e-14      61\n",
       " 1.786671e-02      24\n",
       "                 ... \n",
       "-2.073398e-02       1\n",
       " 2.494284e-01       1\n",
       "-2.281211e-01       1\n",
       " 1.869936e-01       1\n",
       "-1.785360e-01       1\n",
       "Name: count, Length: 31566, dtype: int64"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data['Previous Minute Return'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "b0c6cd2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:       Minutely Returns   R-squared:                       0.123\n",
      "Model:                            OLS   Adj. R-squared:                  0.123\n",
      "Method:                 Least Squares   F-statistic:                     4360.\n",
      "Date:                Tue, 19 Mar 2024   Prob (F-statistic):               0.00\n",
      "Time:                        17:52:39   Log-Likelihood:                 21630.\n",
      "No. Observations:               62220   AIC:                        -4.325e+04\n",
      "Df Residuals:                   62217   BIC:                        -4.323e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "const                      0.0003      0.001      0.397      0.692      -0.001       0.002\n",
      "Previous Minute Return    -0.0393      0.004    -10.463      0.000      -0.047      -0.032\n",
      "MO                         0.0024    2.6e-05     93.077      0.000       0.002       0.002\n",
      "==============================================================================\n",
      "Omnibus:                    36863.807   Durbin-Watson:                   2.001\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        135575206.666\n",
      "Skew:                          -1.139   Prob(JB):                         0.00\n",
      "Kurtosis:                     231.670   Cond. No.                         144.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "y = Data['Minutely Returns']  # This is your dependent variable.\n",
    "X = Data[['Previous Minute Return','MO']]  # This is your independent variable.\n",
    "\n",
    "# Add a constant term to include an intercept in the regression model.\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Create an OLS model.\n",
    "model = sm.OLS(y, X)\n",
    "\n",
    "# Fit the model to perform the regression.\n",
    "results = model.fit()\n",
    "\n",
    "# Print out the statistics.\n",
    "print(results.summary())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47469cbc",
   "metadata": {},
   "source": [
    "# Trading Strategy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "b91748d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data['Cumulative_Order_Flows'] = Data['MO'].rolling(window=30).sum()  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "d987cd97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cumulative Return of the Trading Strategy:\n",
      "0          0.000000\n",
      "1          0.000000\n",
      "2          0.000000\n",
      "3          0.000000\n",
      "4          0.000000\n",
      "            ...    \n",
      "62215    328.911250\n",
      "62216    328.831759\n",
      "62217    328.792045\n",
      "62218    328.811894\n",
      "62219    328.156742\n",
      "Name: Strategy_Return, Length: 62220, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "Data['Trading_Strategy'] = pd.cut(Data['Cumulative_Order_Flows'], bins=[-float('inf'), 0, float('inf')], labels=[-1, 1])\n",
    "Data['Trading_Strategy'] = pd.to_numeric(Data['Trading_Strategy'], errors='coerce').fillna(0)\n",
    "Data['Strategy_Return'] = Data['Trading_Strategy'] * Data['Minutely Returns']\n",
    "cumulative_return = Data['Strategy_Return'].cumsum()\n",
    "print(\"Cumulative Return of the Trading Strategy:\")\n",
    "print(cumulative_return)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "21a30bba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signals to indicate whether to buy or sell:\n",
      "       Trading_Strategy  Signal\n",
      "0                   0.0       0\n",
      "1                   0.0       0\n",
      "2                   0.0       0\n",
      "3                   0.0       0\n",
      "4                   0.0       0\n",
      "...                 ...     ...\n",
      "62215              -1.0       0\n",
      "62216              -1.0       0\n",
      "62217              -1.0       0\n",
      "62218              -1.0       0\n",
      "62219              -1.0       0\n",
      "\n",
      "[62220 rows x 2 columns]\n",
      "Cumulative Return of the Trading Strategy:\n",
      "328.156741823321\n"
     ]
    }
   ],
   "source": [
    "# Now, let's add the explicit buy/sell signals.\n",
    "Data['Signal'] = 0  # Default no signal\n",
    "# Detect changes in 'Trading_Strategy'\n",
    "Data['Prev_Trading_Strategy'] = Data['Trading_Strategy'].shift(1)\n",
    "# If 'Trading_Strategy' goes from -1 to 1, set 'Signal' to \"buy\" (1)\n",
    "Data.loc[(Data['Trading_Strategy'] == 1) & (Data['Prev_Trading_Strategy'] == -1), 'Signal'] = 1\n",
    "# If 'Trading_Strategy' goes from 1 to -1, set 'Signal' to \"sell\" (-1)\n",
    "Data.loc[(Data['Trading_Strategy'] == -1) & (Data['Prev_Trading_Strategy'] == 1), 'Signal'] = -1\n",
    "\n",
    "print(\"Signals to indicate whether to buy or sell:\")\n",
    "print(Data[['Trading_Strategy', 'Signal']])\n",
    "\n",
    "print(\"Cumulative Return of the Trading Strategy:\")\n",
    "print(cumulative_return.iloc[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "f22ff67d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Signal\n",
       " 0    59165\n",
       "-1     1528\n",
       " 1     1527\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data['Signal'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "4e4a84e1",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,5))\n",
    "plt.plot(cumulative_return)\n",
    "plt.plot(Data['Stock_Cumulative_Return'])\n",
    "plt.title('Cumulative Return of the Trading Strategy')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "a2bf1ae3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cumulative Return of the Stock during the Whole Period:\n",
      "-5.938215643075335\n",
      "\n",
      "Cumulative Return of the Trading Strategy:\n",
      "328.156741823321\n"
     ]
    }
   ],
   "source": [
    "Data['Stock_Cumulative_Return'] = Data['Minutely Returns'].cumsum()\n",
    "\n",
    "cumulative_return_strategy = Data['Strategy_Return'].cumsum()\n",
    "\n",
    "print(\"Cumulative Return of the Stock during the Whole Period:\")\n",
    "print(Data['Stock_Cumulative_Return'].iloc[-1])  # Print the last value\n",
    "\n",
    "print(\"\\nCumulative Return of the Trading Strategy:\")\n",
    "print(cumulative_return_strategy.iloc[-1])  # Print the last value\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
